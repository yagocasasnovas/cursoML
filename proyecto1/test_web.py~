#Importing libraries. The same will be used throughout the article.
import numpy as np
import pandas as pd
import random
import matplotlib.pyplot as plt

from matplotlib.pylab import rcParams

from sklearn.linear_model import Ridge

range1 = 16
range1 = 7

rcParams['figure.figsize'] = 12, 10

#csv to dataframe

df = pd.read_csv('train.csv')

dtest = pd.read_csv('test.csv')




#Define input array with angles from 60deg to 300deg converted to radians
x = np.array([i*np.pi/180 for i in range(60,300,4)])
np.random.seed(10)  #Setting seed for reproducability
y = np.sin(x) + np.random.normal(0,0.15,len(x))
z = np.sin(x)
data = pd.DataFrame(np.column_stack([x,y]),columns=['x','y'])



#print data.head()

#plt.plot(data['x'],data['y'],'.')


#plt.plot(x,y)
#plt.plot(x,z)

for i in range(2,16):  #power of 1 is already there
    colname = 'x_%d'%i      #new var will be x_power
    data[colname] = data['x']**i
#print data.head()




def ridge_yago(dataX,Y,alpha):
	
	#normalizar dataX !!!
	
	#restar media y dividir por desviacion estandar
	
	#media
	
	
	print dataX.ix[:,0].mean()
	#normalizar Y --> restarle la media
	
	#anyadir vector con 1s???
	
	#print dataX
	
	dataXX = dataX.as_matrix()
	
	print dataXX
	
	#print dataXX.shape
	
	dataXXT = dataXX.transpose()
	
	#print dataXXT.shape
	
	j1 = np.dot(dataXXT,Y)
	
	#print j1
	
	j2 = np.dot(dataXXT,dataXX)
	
	#print j2
	
	gammaMatrix = np.identity(6,dtype=float)

	gammaMatrix = alpha * gammaMatrix
	
	j4 = gammaMatrix + j2
	
	j41 = np.add(gammaMatrix,j2)
	
	j5 = np.linalg.inv(j41)
	
	wrr = np.dot(j5,j1)
	
	return wrr
	
	#	wrr = (1 / (gamma*I + Xtransposed*X)) * Xtransposed*y
	
	#X = dataX
	#y = Y
	#gamma = alpha
	
	
	
	
	

def ridge_regression(datatest,y_test,data, predictors, alpha, models_to_plot={}):
	
	
	#Fit the model

	#print data[predictors]
	
	ridgereg = Ridge(alpha=alpha,normalize=True)
	#ridgereg.fit(data[predictors],data['y'])
	ridgereg.fit(data[predictors],data['resistance'])
	#print alpha
	print ridgereg.coef_
	y_pred = ridgereg.predict(datatest[predictors])
	
	#print y_pred - y_test
	
	#Check if a plot is to be made for the entered alpha
	if alpha in models_to_plot:
		jj = 1
		#plt.subplot(models_to_plot[alpha])
		#plt.tight_layout()
		#plt.plot(datatest['beam'],y_pred)
		#plt.plot(datatest['beam'],y_test,'.')
		#plt.title('Plot for alpha: %.3g'%alpha)
	
	#Return the result in pre-defined format
	rss = sum((y_pred-y_test)**2)
	#print rss
	ret = [rss]
	ret.extend([ridgereg.intercept_])
	ret.extend(ridgereg.coef_)
	return ret

#Initialize predictors to be set of 15 powers of x
predictors=['x']
predictors.extend(['x_%d'%i for i in range(2,16)])
predictors = ['long','prism','length','beam','ratio','froude']

#Set the different values of alpha to be tested
alpha_ridge = [1e-15, 1e-10, 1e-8, 1e-4, 1e-3,1e-2, 1, 5, 10, 20]
alpha_ridge = [0.5]
alpha_n = 10
alpha_n = 1

#Initialize the dataframe for storing coefficients.
col = ['rss','intercept'] + ['coef_x_%d'%i for i in range(1,range1)]



ind = ['alpha_%.2g'%alpha_ridge[i] for i in range(0,alpha_n)]


coef_matrix_ridge = pd.DataFrame(index=ind, columns=col)

#print data.head()

#print predictors



X_yago = df[predictors]

X_test_yago = dtest[predictors]

yy = df['resistance']

y_real = dtest['resistance']



#print X_yago	

models_to_plot = {1e-15:231, 1e-10:232, 1e-4:233, 1e-3:234, 1e-2:235, 0.5:236}
for i in range(alpha_n):
	print 'scikit'
	coef_matrix_ridge.iloc[i,] = ridge_regression(X_test_yago,y_real,df, predictors, alpha_ridge[i], models_to_plot)
	print 'yago'
	print ridge_yago(X_yago,yy,alpha_ridge[i])

#plt.show()

#print coef_matrix_ridge














